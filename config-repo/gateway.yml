server.ssl:
  key-store-type: PKCS12
  key-store: classpath:keystore/keystore.p12
  key-store-password: 013234656798nta@
  key-alias: prod
server:
  error:
    whitelabel:
      enabled: false
  port: 8443
spring.application.name: gateway
app:
  product: localhost
  config-server: localhost
  eureka-server: localhost
  auth-server: localhost
  auth:
    host: localhost

port:
  config: 8888
  discount: 8093
  composite: 8000
  auth: 9999
  product: 8081
  recommendation: 8082
  review: 8083
  feature: 8084
  order: 8090
  order-composite: 8091
  email: 8092
host:
  email: localhost
  discount: localhost
  order-composite: localhost
  product: localhost
  composite: localhost
  auth: localhost
  recommendation: localhost
  review: localhost
  feature: localhost
  order: localhost
spring.cloud.gateway.routes:
  - id: config-server
    uri: http://${app.config-server}:${port.config}
    predicates:
      - Path=/config/**
    filters:
      - RewritePath=/config/(?<segment>.*), /$\{segment}
  - id: product-composite
    uri: http://${host.composite}:${port.composite}
    predicates:
      - Path=/product-composite/**
  - id: order
    uri: http://${host.order}:${port.order}
    predicates:
      - Path=/order/**
  - id: discount
    uri: http://${host.discount}:${port.discount}
    predicates:
      - Path=/discount/**

  - id: order-composite
    uri: http://${host.order-composite}:${port.order-composite}
    predicates:
      - Path=/order-composite/**
  - id: auth-server
    uri: http://${host.auth}:${port.auth}
    predicates:
      - Path=/oauth2/**

  - id: product
    uri: http://${host.product}:${port.product}
    predicates:
      - Path=/product/**
  - id: feature
    uri: http://${host.feature}:${port.feature}
    predicates:
      - Path=/feature/**
  - id: recommendation
    uri: http://${host.recommendation}:${port.recommendation}
    predicates:
      - Path=/recommendation/**
  - id: review
    uri: http://${host.review}:${port.review}
    predicates:
      - Path=/review/**
  - id: email
    uri: http://${host.email}:${port.email}/oauth2/user/register/opt
    predicates:
      - Path=/review/**
  - id: host_route_200
    uri: http://httpstat.us
    predicates:
      - Host=i.feel.lucky:8080
      - Path=/headerrouting/**
    filters:
      - SetPath=/200

  - id: host_route_418
    uri: http://httpstat.us
    predicates:
      - Host=im.a.teapot:8080
      - Path=/headerrouting/**
    filters:
      - SetPath=/418

  - id: host_route_501
    uri: http://httpstat.us
    predicates:
      - Path=/headerrouting/**
    filters:
      - SetPath=/501
management.endpoint.gateway.enabled: false
management.endpoint.health.show-details: "ALWAYS"
management:
  endpoints:
    web:
      exposure:
        include: health,info

spring.cloud:
  compatibility-verifier:
    enabled: false
logging:
  level:
    root: INFO
    org.springframework.cloud.gateway.route.RouteDefinitionRouteLocator: INFO
    org.springframework.cloud.gateway: TRACE
spring:
  cloud:
    loadbalancer:
      ribbon:
        enabled: false  # Disable Ribbon, since Spring Cloud LoadBalancer is used
      strategy: round-robin
  security:
    oauth2:
      client:
        registration:
          oidc-client:
            client-id: chau
            client-secret: 123
            scope: openid, profile
            redirect-uri: "{baseUrl}/login/oauth2/code/{registrationId}"
            authorization-grant-type: authorization_code
        provider:
          oidc-provider:
            authorization-uri: "http://${app.auth.host}:${port.auth}/oauth2/authorize"
            token-uri: "http://${app.auth.host}:${port.auth}/oauth2/token"
            user-info-uri: "http://${app.auth.host}:${port.auth}/userinfo"
            jwk-set-uri: "http://${app.auth.host}:${port.auth}/.well-known/jwks.json"
resilience4j.circuitbreaker:
  instances:
    product:
      allowHealthIndicatorToFail: false
      registerHealthIndicator: true
      slidingWindowType: COUNT_BASED
      slidingWindowSize: 5
      failureRateThreshold: 50
      waitDurationInOpenState: 10000
      permittedNumberOfCallsInHalfOpenState: 3
      automaticTransitionFromOpenToHalfOpenEnabled: true
      ignoreExceptions:
        - se.chau.microservices.api.exception.InvalidInputException
        - se.chau.microservices.api.exception.NotFoundException

management.tracing.sampling.probability: 1.0
spring.security.oauth2.resourceserver.jwt.issuer-uri: http://localhost:9999
zipkin:
  baseUrl: http://172.18.0.10:9411
  sender:
    type: web
---
spring.config.activate.on-profile: docker
spring.security.oauth2.resourceserver.jwt.issuer-uri: http://14.225.206.109:9999
zipkin:
  baseUrl: http://127.0.0.1:9411
  sender:
    type: web
port:
  discount: 8095
  config: 8888
  composite: 8080
  auth: 9999
  product: 8081
  recommendation: 80
  review: 80
  feature: 8085
  email: 8092
  order: 8090
host:
  auth: 14.225.206.109
  email: email
  discount: discount
  product: product
  composite: product-composite
  recommendation: recommendation
  review: review
  feature: feature
  order: order
app:
  auth-server: 14.225.206.109
  product: product
  auth:
    host: 14.225.206.109
  config-server: config-server
---
spring.config.activate.on-profile: docker1
spring.security.oauth2.resourceserver.jwt.issuer-uri: http://auth-server:9999
zipkin:
  baseUrl: http://127.0.0.1:9411
  sender:
    type: web
port:
  discount: 8095
  config: 8888
  composite: 8080
  auth: 9999
  product: 8081
  recommendation: 80
  review: 80
  feature: 8085
  email: 8092
  order: 8090
host:
  auth: auth-server
  email: email
  discount: discount
  product: product
  composite: product-composite
  recommendation: recommendation
  review: review
  feature: feature
  order: order
app:
  auth-server: auth-server
  product: product
  auth:
    host: auth-server
  config-server: config-server

---
spring.config.activate.on-profile: prod
logging:
  level:
    root: WARN
    org.springframework.cloud.gateway.route.RouteDefinitionRouteLocator: WARN
    org.springframework.cloud.gateway: WARN
    org.springframework.web.server.adapter.HttpWebHandlerAdapter: WARN