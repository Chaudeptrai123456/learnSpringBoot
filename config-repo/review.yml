server.port: 8083
spring:
  cloud:
    compatibility-verifier:
      enabled: false
  datasource:
    url: jdbc:mysql://localhost:3306/review
    username: chau
    password: 123
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    hibernate:
      ddl-auto: update  # or `create-drop` for fresh schema creation during development
    show-sql: true       # Show SQL queries in the console (optional)
    database-platform: org.hibernate.dialect.MySQL8Dialect
spring.cloud.function.definition: messageProcessor
resilience4j.circuitbreaker:
  instances:
    product:
      allowHealthIndicatorToFail: false
      registerHealthIndicator: true
      slidingWindowType: COUNT_BASED
      slidingWindowSize: 5
      failureRateThreshold: 50
      waitDurationInOpenState: 10000
      permittedNumberOfCallsInHalfOpenState: 3
      automaticTransitionFromOpenToHalfOpenEnabled: true
      ignoreExceptions:
        - se.chau.microservices.api.exception.InvalidInputException
        - se.chau.microservices.api.exception.NotFoundException
management.tracing.sampling.probability: 1.0
spring.cloud.stream:
  defaultBinder: rabbit
  default.contentType: application/json
  bindings.messageProcessor-in-0:
    destination: reviews
    group: reviewsGroup

spring.cloud.stream.bindings.messageProcessor-in-0.consumer:
  maxAttempts: 3
  backOffInitialInterval: 500
  backOffMaxInterval: 1000
  backOffMultiplier: 2.0

spring.cloud.stream.rabbit.bindings.messageProcessor-in-0.consumer:
  autoBindDlq: true
  republishToDlq: true

spring.cloud.stream.kafka.bindings.messageProcessor-in-0.consumer:
  enableDlq: true

---
spring.config.activate.on-profile: docker
spring.security.oauth2.resourceserver.jwt.issuer-uri: http://auth-server:80

management:
  endpoint:
    health:
      validate-group-membership: false
server.port: 80
spring:
  datasource:
    url: jdbc:mysql://mysql:3306/review
    username: ${CONFIG_SERVER_USR}
    password: ${CONFIG_SERVER_PWD}
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    hibernate:
      ddl-auto: update  # or `create-drop` for fresh schema creation during development
    show-sql: true       # Show SQL queries in the console (optional)
    database-platform: org.hibernate.dialect.MySQL8Dialect

spring.rabbitmq.host: rabbitmq

spring.cloud.stream.kafka.binder.brokers: kafka
---
spring.config.activate.on-profile: docker
spring.security.oauth2.resourceserver.jwt.issuer-uri: http://auth-server:9999

management:
  endpoint:
    health:
      validate-group-membership: false
server.port: 80
spring:
  datasource:
    url: jdbc:mysql://mysql:3306/review
    username: ${CONFIG_SERVER_USR}
    password: ${CONFIG_SERVER_PWD}
    driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    hibernate:
      ddl-auto: update  # or `create-drop` for fresh schema creation during development
    show-sql: true       # Show SQL queries in the console (optional)
    database-platform: org.hibernate.dialect.MySQL8Dialect

spring.rabbitmq.host: rabbitmq

spring.cloud.stream.kafka.binder.brokers: kafka

---
spring.config.activate.on-profile: streaming_partitioned

spring.cloud.stream.bindings.messageProcessor-in-0.consumer:
  partitioned: true
  instanceCount: 2

---
spring.config.activate.on-profile: streaming_instance_0

spring.cloud.stream.bindings.messageProcessor-in-0.consumer.instanceIndex: 0

---
spring.config.activate.on-profile: streaming_instance_1

spring.cloud.stream.bindings.messageProcessor-in-0.consumer.instanceIndex: 1
---
spring.config.activate.on-profile: prod
spring:
  cloud:
    compatibility-verifier:
      enabled: false
  datasource:
    url: jjdbc:mysql://172.20.0.6:3306/review
    username: chau
    password: 123
    driver-class-name: com.mysql.cj.jdbc.Driver
logging:
  level:
    root: WARN
    se.magnus: WARN
    org.hibernate.SQL: WARN
    org.hibernate.type.descriptor.sql.BasicBinder: WARN