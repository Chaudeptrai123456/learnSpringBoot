server:
  port: 8000
uri:
  service:
    discount: http://localhost:8093
    product: http://localhost:8081
    recommendation: http://localhost:8082
    review: http://localhost:8083
    feature: http://localhost:8084

springdoc:
  swagger-ui.path: /openapi/swagger-ui.html
  api-docs.path: /openapi/v3/api-docs
  packagesToScan: se.magnus.microservices.composite.product
  pathsToMatch: /**
  cache.disabled: true
  swagger-ui:
    oauth2-redirect-url: /swagger-ui/oauth2-redirect.html
    oauth:
      clientId: writer
      clientSecret: secret-writer
      useBasicAuthenticationWithAccessCodeGrant: true
  oAuthFlow:
    authorizationUrl: https://localhost:8443/oauth2/authorize
    tokenUrl: https://localhost:8443/oauth2/token
spring:
  redis:
    host: redis
    port: 6379
    password: 123
    username: default
    database: 0
  cloud:
    compatibility-verifier:
      enabled: false
  application.name: product-composite
api:
  common:
    apiVersion: 0.0.1
    appTitle: test choi cho vui
    appDescription: | # Normal response
      If the requested product id is found the method will return information regarding:
      1. Base product information
      1. Reviews
      1. Recommendations
      1. Service Addresses\n(technical information regarding the addresses of the microservices that created the response)
      
      # Expected partial and error responses
      In the following cases, only a partial response be created (used to simplify testing of error conditions)
      
      ## Product id 113
      200 - Ok, but no recommendations will be returned
      
      ## Product id 213
      200 - Ok, but no reviews will be returned
      
      ## Non numerical product id
      400 - A **Bad Request** error will be returned
      
      ## Product id 13
      404 - A **Not Found** error will be returned
      
      ## Negative product ids
      422 - An **Unprocessable Entity** error will be returned
    apiContactName: phamchau
    appContactUrl:  test phase
    appContactEmail: phamchaugiatu@gmail.com
    apiTermOfService: 12312
    appLicense: 12312
    apiLicenseUrl: 23123
    apiExternalDoc: 123123
    apiExternalUrl: 123122

server.port: 8000
server.error.include-message: always
spring.application.name: product-composite

app.eureka-server: localhost
logging:
  level:
    root: INFO
management.endpoint.health.show-details: "ALWAYS"
management.endpoints.web.exposure.include: "*"

spring.cloud.stream:
  default.contentType: application/json
  bindings:
    products-out-0:
      destination: products
      producer:
        required-groups: auditGroup
    recommendations-out-0:
      destination: recommendations
      producer:
        required-groups: auditGroup
    reviews-out-0:
      destination: reviews
      producer:
        required-groups: auditGroup
    features-out-0:
      destination: features
      producer:
        required-groups: auditGroup

resilience4j.timelimiter:
  instances:
    product:
      timeoutDuration: 2s

resilience4j.retry:
  instances:
    product:
      maxAttempts: 3
      waitDuration: 1000
      retryExceptions:
        - org.springframework.web.reactive.function.client.WebClientResponseException$InternalServerError

management.health.circuitbreakers.enabled: true

resilience4j.circuitbreaker:
  instances:
    product:
      allowHealthIndicatorToFail: false
      registerHealthIndicator: true
      slidingWindowType: COUNT_BASED
      slidingWindowSize: 50
      failureRateThreshold: 100
      waitDurationInOpenState: 100000
      permittedNumberOfCallsInHalfOpenState: 30
      automaticTransitionFromOpenToHalfOpenEnabled: true
      ignoreExceptions:
        - se.chau.microservices.api.exception.InvalidInputException
        - se.chau.microservices.api.exception.NotFoundException
management.tracing.sampling.probability: 1.0
logging.pattern.level: "%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]"

services.composite.uri: https://localhost:8443
---
spring.config.activate.on-profile: docker
server.port: 80
services.composite.uri: https://localhost:8443
zipkin:
  baseUrl: http://zipkin-server:9411 # Zipkin server URL (replace with your Zipkin server URL)
  sender:
    type: web
uri:
  service:
    discount: http://discount:80
    product: http://product:80
    recommendation: http://recommendation:80
    review: http://review:80
    feature: http://feature:80
---
spring.config.activate.on-profile: streaming_partitioned

spring.cloud.stream.bindings.products-out-0.producer:
  partition-key-expression: headers['partitionKey']
  partition-count: 2

spring.cloud.stream.bindings.recommendations-out-0.producer:
  partition-key-expression: headers['partitionKey']
  partition-count: 2

spring.cloud.stream.bindings.reviews-out-0.producer:
  partition-key-expression: headers['partitionKey']
  partition-count: 2
spring.cloud.stream.bindings.features-out-0.producer:
  partition-key-expression: headers['partitionKey']
  partition-count: 2
---
spring.config.activate.on-profile: prod

logging:
  level:
    root: WARN
    se.magnus: WARN
    org.springframework.web.server.adapter.HttpWebHandlerAdapter: WARN