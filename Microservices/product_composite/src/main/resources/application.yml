springdoc:
  swagger-ui:
      path: /openapi/swagger-ui.html
  api-docs:
    path: /openapi/v3/api-docs
  packagesToScan: se.chau.microservices.core.product_composite
  pathsToMatch: /**
api:
  common:
    apiVersion: 0.0.1
    appTitle: test choi cho vui
    appDescription: | # Normal response
      If the requested product id is found the method will return information regarding:
      1. Base product information
      1. Reviews
      1. Recommendations
      1. Service Addresses\n(technical information regarding the addresses of the microservices that created the response)
      
      # Expected partial and error responses
      In the following cases, only a partial response be created (used to simplify testing of error conditions)
      
      ## Product id 113
      200 - Ok, but no recommendations will be returned
      
      ## Product id 213
      200 - Ok, but no reviews will be returned
      
      ## Non numerical product id
      400 - A **Bad Request** error will be returned
      
      ## Product id 13
      404 - A **Not Found** error will be returned
      
      ## Negative product ids
      422 - An **Unprocessable Entity** error will be returned
    apiContactName: phamchau
    appContactUrl:  test phase
    appContactEmail: phamchaugiatu@gmail.com
    apiTermOfService: 12312
    appLicense: 12312
    apiLicenseUrl: 23123
    apiExternalDoc: 123123
    apiExternalUrl: 123122

server.port: 8000
server.error.include-message: always
spring.application.name: product_composite

app.eureka-server: localhost

app:
  product-service:
    host: localhost
    port: 8081
  recommendation-service:
    host: localhost
    port: 8082
  feature-service:
    host: localhost
    port: 8085
  review-service:
    host: localhost
    port: 8083
logging:
  level:
    root: INFO
management.endpoint.health.show-details: "ALWAYS"
management.endpoints.web.exposure.include: "*"
spring.cloud.stream:
  defaultBinder: rabbit
  default.contentType: application/json
  bindings:
    products-out-0:
      destination: products
      producer:
        required-groups: auditGroup
    recommendations-out-0:
      destination: recommendations
      producer:
        required-groups: auditGroup
    reviews-out-0:
      destination: reviews
      producer:
        required-groups: auditGroup
    features-out-0:
      destination: features
      producer:
        required-groups: auditGroup
spring.cloud.stream.bindings.products-out-0.producer:
  partition-key-expression: headers['partitionKey']
  partition-count: 2
spring.cloud.stream.bindings.recommendations-out-0.producer:
  partition-key-expression: headers['partitionKey']
  partition-count: 2
spring.cloud.stream.bindings.reviews-out-0.producer:
  partition-key-expression: headers['partitionKey']
  partition-count: 2
spring.cloud.stream.bindings.features-out-0.producer:
  partition-key-expression: headers['partitionKey']
  partition-count: 2
spring.cloud.stream.kafka.binder:
  brokers: 127.0.0.1
  defaultBrokerPort: 9092

spring.rabbitmq:
  host: 127.0.0.1
  port: 5672
  username: guest
  password: guest

eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/
    initialInstanceInfoReplicationIntervalSeconds: 5
    registryFetchIntervalSeconds: 5
  instance:
    leaseRenewalIntervalInSeconds: 5
    leaseExpirationDurationInSeconds: 5

---
spring.config.activate.on-profile: docker
server.port: 8080
eureka.client.serviceUrl.defaultZone: http://eureka:8761/eureka/
app:
  product-service:
    host: product
    port: 8080
  recommendation-service:
    host: recommendation
    port: 8080
  review-service:
    host: review
    port: 8080
  feature-service:
    host: feature
    port: 8080

spring.rabbitmq.host: rabbitmq

spring.cloud.stream.kafka.binder.brokers: kafka

---
spring.config.activate.on-profile: streaming_partitioned

spring.cloud.stream.bindings.products-out-0.producer:
  partition-key-expression: headers['partitionKey']
  partition-count: 2

spring.cloud.stream.bindings.recommendations-out-0.producer:
  partition-key-expression: headers['partitionKey']
  partition-count: 2

spring.cloud.stream.bindings.reviews-out-0.producer:
  partition-key-expression: headers['partitionKey']
  partition-count: 2
spring.cloud.stream.bindings.features-out-0.producer:
  partition-key-expression: headers['partitionKey']
  partition-count: 2

---


#    app:
#      product-service:
#        host: product
#        port: 8081
#      recommendation-service:
#        host: recommendation
#        port: 8082
#      review-service:
#        host: review
#        port: 8083