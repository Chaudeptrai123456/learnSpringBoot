#version : '1.1'
services:
  rabbitmq:
    image: rabbitmq:3.11.8-management
    mem_limit: 512m
    ports:
      - 5672:5672
      - 15672:15672
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 5s
      timeout: 2s
      retries: 60
  kafka:
    image: confluentinc/cp-kafka:7.3.1
    restart: always
    mem_limit: 1024m
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_BROKER_ID=1
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
    depends_on:
      - zookeeper

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.1
    restart: always
    mem_limit: 512m
    ports:
      - "2181:2181"
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181

  mysql:
    image: mysql:8.0
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: 123
      MYSQL_DATABASE: review
      MYSQL_USER: ${CONFIG_SERVER_USR}
      MYSQL_PASSWORD: ${CONFIG_SERVER_PWD}
    ports:
      - "3306:3306"
    healthcheck:
      test: "mongo --eval 'db.stats().ok'"
      interval: 5s
      timeout: 2s
      retries: 60
    volumes:
      - mysql_data:/var/lib/mysql
  mongodb:
    image: mongo:latest
    container_name: mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${CONFIG_SERVER_USR}
      MONGO_INITDB_ROOT_PASSWORD: ${CONFIG_SERVER_PWD}
    ports:
      - "27017:27017"
    healthcheck:
      test: "mongo --eval 'db.stats().ok'"
      interval: 5s
      timeout: 2s
      retries: 60
    volumes:
      - mongo_data:/data/db
  product:
    build: Microservices/product
    depends_on:
      - auth-server
    mem_limit: 512m
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_0
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
  product2:
    build: Microservices/product
    depends_on:
      - auth-server
    mem_limit: 512m
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_1
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
  config-server:
    build: SpringCloud/config-service
    mem_limit: 512m
    environment:
      - SPRING_PROFILES_ACTIVE=docker, native
      - ENCRYPT_KEY=${CONFIG_SERVER_ENCRYPT_KEY}
      - SPRING_SECURITY_USER_NAME=${CONFIG_SERVER_USR}
      - SPRING_SECURITY_USER_PASSWORD=${CONFIG_SERVER_PWD}
    volumes:
      - ./config-repo:/config-repo
  product-composite:
    build: Microservices/product_composite
    mem_limit: 512m
    depends_on:
      - config-server
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned
      - OAUTH_ISSUER_URL=http://auth-server:80
      - SPRING_SECURITY_USER_NAME=user
      - SPRING_SECURITY_USER_PASSWORD=123
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
  review:
    build: Microservices/review
    mem_limit: 512m
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_0
      - SPRING_SECURITY_USER_NAME=user
      - SPRING_SECURITY_USER_PASSWORD=123
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    depends_on:
      - config-server
  review2:
    build: Microservices/review
    mem_limit: 512m
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_1
      - SPRING_SECURITY_USER_NAME=user
      - SPRING_SECURITY_USER_PASSWORD=123
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    depends_on:
      - mysql
      - config-server

  recommendation:
    build: Microservices/recommendation
    depends_on:
      - mongodb
      - auth-server
    mem_limit: 512m
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_0
      - SPRING_SECURITY_USER_NAME=user
      - SPRING_SECURITY_USER_PASSWORD=123
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
  recommendation2:
    build: Microservices/recommendation
    depends_on:
      - mongodb
      - config-server

    mem_limit: 512m
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_1
      - SPRING_SECURITY_USER_NAME=user
      - SPRING_SECURITY_USER_PASSWORD=123
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
  feature:
    build: Microservices/feature
    depends_on:
      - mongodb
      - config-server

    mem_limit: 512m
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_0
      - SPRING_SECURITY_USER_NAME=${CONFIG_SERVER_USR}
      - SPRING_SECURITY_USER_PASSWORD=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
  feature2:
    build: Microservices/feature
    depends_on:
      - mongodb
      - config-server

    mem_limit: 512m
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_1
      - SPRING_SECURITY_USER_NAME=${CONFIG_SERVER_USR}
      - SPRING_SECURITY_USER_PASSWORD=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
  gateway:
    build: SpringCloud/Gateway
    depends_on:
      - config-server
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - OAUTH_ISSUER_URL=http://auth-server:80
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    ports:
      - "8443:8443"
    mem_limit: 512m
  auth-server:
    build: SpringCloud/OauthorizationServer
    depends_on:
      - config-server
    ports:
      - "80:80"
    environment:
      - spring.cloud.config.uri= http://config-server:8888
      - SPRING_PROFILES_ACTIVE=docker
      - ISSUER_URL=http://auth-server:80
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    mem_limit: 512m
  zipkin-server:
    image: openzipkin/zipkin:2.24.0
    container_name: zipkin-server
    restart: always
    mem_limit: 1024m
    environment:
      - STORAGE_TYPE=mem
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    ports:
      - 9411:9411
  redis:
    image: redis:latest
    container_name: redis
    restart: always
    volumes:
      - redis_volume_data:/data
      - ./aclfile:/usr/local/etc/redis/aclfile
    ports:
      - 6379:6379
    environment:
#      username : default
      -  REDIS_PASSWORD=123
    command: redis-server --requirepass "123" --aclfile /usr/local/etc/redis/aclfile
  redis_insight:
    image: redislabs/redisinsight:latest
    container_name: redis_insight
    restart: always
    ports:
      - 8001:8001
    volumes:
      - redis_insight_volume_data:/db
volumes:
  redis_volume_data: {}
  redis_insight_volume_data: {}
  mongo_data: {}
  mysql_data: {}