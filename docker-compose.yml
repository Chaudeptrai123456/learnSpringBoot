#version : '1.1'
services:
  rabbitmq:
    image: rabbitmq:3.11.8-management
    mem_limit: 256m
    ports:
      - 5672:5672
      - 15672:15672
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 5s
      timeout: 2s
      retries: 60
  message-server:
    build: Microservices/messaging-service
    ports:
      - "8093:8093"
    mem_limit: 256m
    depends_on:
      - config-server
#  zookeeper:
#    image: confluentinc/cp-zookeeper:7.3.1
#    restart: always
#    mem_limit: 512m
#    ports:
#      - "2181:2181"
#    environment:
#      - ZOOKEEPER_CLIENT_PORT=2181

  mysql:
    image: mysql:8.0
    container_name: mysql
    mem_limit: 512m
    environment:
      MYSQL_ROOT_PASSWORD: 123
      MYSQL_DATABASE: review
      MYSQL_USER: ${CONFIG_SERVER_USR}
      MYSQL_PASSWORD: ${CONFIG_SERVER_PWD}
    ports:
      - "3306:3306"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 5s
      timeout: 2s
      retries: 60
    volumes:
      - mysql_data:/var/lib/mysql
      - ./my.cnf:/etc/mysql/my.cnf  # ðŸ”¹ Gáº¯n file config vÃ o MySQL

  mongodb:
    image: mongo:latest
    container_name: mongodb
    mem_limit: 512m
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${CONFIG_SERVER_USR}
      MONGO_INITDB_ROOT_PASSWORD: ${CONFIG_SERVER_PWD}
    ports:
      - "27017:27017"
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.runCommand({ ping: 1 })" ]
      interval: 5s
      timeout: 2s
      retries: 60
    volumes:
      - mongo_data:/data/db
      - ./mongod.conf:/etc/mongod.conf  # ðŸ”¹ Gáº¯n file config vÃ o MongoDB
  product:
    image: hands-on/product
    build: Microservices/product
    depends_on:
      - auth-server
      - redis
    mem_limit: 256m
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_0
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
#  product2:
#    build: Microservices/product
#    image: hands-on/product
#    depends_on:
#      - auth-server
#      - redis
#    mem_limit: 256m
#    environment:
#      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_1
#      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
#      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
  config-server:
    build: SpringCloud/config-service
    image: hands-on/config-server
    mem_limit: 256m
    environment:
      - SPRING_PROFILES_ACTIVE=docker, native
      - ENCRYPT_KEY=${CONFIG_SERVER_ENCRYPT_KEY}
      - SPRING_SECURITY_USER_NAME=${CONFIG_SERVER_USR}
      - SPRING_SECURITY_USER_PASSWORD=${CONFIG_SERVER_PWD}
    volumes:
      - ./config-repo:/config-repo
  product-composite:
    image: hands-on/product-composite
    build: Microservices/product_composite
    mem_limit: 256m
    depends_on:
      - config-server
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned
      - OAUTH_ISSUER_URL=http://auth-server:80
      - SPRING_SECURITY_USER_NAME=user
      - SPRING_SECURITY_USER_PASSWORD=123
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
  order:
    build: Microservices/order
    image: hands-on/order
    mem_limit: 256m
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_0
      - SPRING_SECURITY_USER_NAME=user
      - SPRING_SECURITY_USER_PASSWORD=123
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    depends_on:
      - config-server
  email:
    build: Microservices/emailService
    image: hands-on/email
    mem_limit: 256m
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_SECURITY_USER_NAME=user
      - SPRING_SECURITY_USER_PASSWORD=123
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    depends_on:
      - config-server
  review:
    build: Microservices/review
    image: hands-on/review
    mem_limit: 256m
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_0
      - SPRING_SECURITY_USER_NAME=user
      - SPRING_SECURITY_USER_PASSWORD=123
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    depends_on:
      - config-server
#  review2:
#    build: Microservices/review
#    image: hands-on/review
#    mem_limit: 512m
#    environment:
#      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_1
#      - SPRING_SECURITY_USER_NAME=user
#      - SPRING_SECURITY_USER_PASSWORD=123
#      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
#      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
#    depends_on:
#      - mysql
#      - config-server

  recommendation:
    image: hands-on/recommendation
    build: Microservices/recommendation
    depends_on:
      - mongodb
      - auth-server
    mem_limit: 256m
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_0
      - SPRING_SECURITY_USER_NAME=user
      - SPRING_SECURITY_USER_PASSWORD=123
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
#  recommendation2:
#    image: hands-on/recommendation
#    build: Microservices/recommendation
#    depends_on:
#      - mongodb
#      - config-server
#
#    mem_limit: 512m
#    environment:
#      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_1
#      - SPRING_SECURITY_USER_NAME=user
#      - SPRING_SECURITY_USER_PASSWORD=123
#      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
#      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
  feature:
    image: hands-on/feature
    build: Microservices/feature
    depends_on:
      - mongodb
      - config-server
    mem_limit: 256m
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_0
      - SPRING_SECURITY_USER_NAME=${CONFIG_SERVER_USR}
      - SPRING_SECURITY_USER_PASSWORD=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
  discount:
    build: Microservices/Discount
    image: hands-on/discount
    depends_on:
      - mongodb
      - config-server
    mem_limit: 256m
    environment:
      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_1
      - SPRING_SECURITY_USER_NAME=${CONFIG_SERVER_USR}
      - SPRING_SECURITY_USER_PASSWORD=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
#  feature2:
#    build: Microservices/feature
#    image: hands-on/feature
#    depends_on:
#      - mongodb
#      - config-server
#    mem_limit: 512m
#    environment:
#      - SPRING_PROFILES_ACTIVE=docker,streaming_partitioned,streaming_instance_1
#      - SPRING_SECURITY_USER_NAME=${CONFIG_SERVER_USR}
#      - SPRING_SECURITY_USER_PASSWORD=${CONFIG_SERVER_USR}
#      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
#      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
  gateway:
    build: SpringCloud/Gateway
    image: hands-on/gateway
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    ports:
      - "8443:8443"
    mem_limit: 256m
  auth-server:
    build: SpringCloud/OauthorizationServer
    image: hands-on/auth-server
    ports:
      - "80:80"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
  zipkin-server:
    image: openzipkin/zipkin:2.24.0
    container_name: zipkin-server
    restart: always
    mem_limit: 512m
    environment:
      - STORAGE_TYPE=mem
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    ports:
      - 9411:9411
  redis:
    image: redis:latest
    mem_limit: 128m
    container_name: redis
    ports:
      - "6379:6379"
    command: [ "redis-server"]
#
#  redis_insight:
#    image: redislabs/redisinsight:latest
#    container_name: redis_insight
#    restart: always
#    ports:
#      - 8001:8001
#    volumes:
#      - redis_insight_volume_data:/db
volumes:
  redis_volume_data: {}
  redis_insight_volume_data: {}
  mongo_data: {}
  mysql_data: {}
